#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import shutil
import pandas as pd
from Bio import SeqIO
from ipywidgets import widgets
from pathlib import Path
from scripts.configuration import RunConfig
from basicfunctions import GeneralFunctions as G
from basicfunctions import HelperFunctions as H

class Annotation(RunConfig):
    def __init__(self, configuration):
        RunConfig.__init__(self, configuration)
        self.progress = widgets.FloatProgress(value=0, min=0.0, max=1.0)
        self.output = widgets.Output(layout=self.outputlayout)
        self.annot_report_path = Path(self.genomedata_dir, "annotation_report.csv")

    def count_contigs(self, filepath):
        contigs = list(SeqIO.parse(filepath, "fasta"))
        if len(contigs) >= self.contiglimit:
            dir_tree, filename = os.path.split(filepath)
            self.move_to_excluded(dir_tree, filename)
            return "max contig"
        return "passed QC"

    def start_prokka(self, inputfile, outputname):
        if self.config.virus:
            genus = 'Genus'
            kingdom = "Viruses"
        else:
            genus = self.target.split("_")[0]
            kingdom = "Bacteria"
        outdir = str(Path(self.annotation_dir, outputname))
        prokka_cmd = [
            "prokka",
            "--kingdom", kingdom,
            "--outdir", outdir,
            "--genus", genus,
            "--locustag", outputname,
            "--prefix", outputname,
            "--cpus", "0",
            str(inputfile)
        ]
        G.comm_log(outputname + " annotation required")
        try:
            G.run_subprocess(prokka_cmd, True, True, False)
        except (KeyboardInterrupt, SystemExit):
            G.keyexit_rollback(
                "annotation", dp=outdir)
            raise

    def annotation(self, filepath, accession):
        G.create_directory(self.annotation_dir)
        fmts = ["fna", "gff", "ffn"]
        dirs = [self.fna_dir, self.gff_dir, self.ffn_dir ]
        testlist = []
        for d in dirs:
            for filename in os.listdir(d):
                if filename.startswith(accession):
                    testlist.append(1)
        if testlist != [1, 1, 1]:
            if os.path.isfile(filepath):
                self.start_prokka(filepath, accession)
                outdir = str(Path(self.annotation_dir, accession))
                for filename in os.listdir(outdir):
                    for i, fmt in enumerate(fmts):
                        if filename.endswith(fmt):
                            fromdir = Path(outdir, filename)
                            todir = Path(dirs[i], filename)
                            shutil.copy(fromdir, todir)
            else:
                return "failed"
        return "annotated"

    def main(self):
        if os.path.isdir(self.pangenome_dir):
            G.comm_log("> Found pangenome directory, skip QC ")
        else:
            qc_files = []
            max_contigs = []
            annotations = []
            accessions = []
            for filename in os.listdir(self.genomic_dir):
                accession = H.accession_from_filename(filename)
                filepath = Path(self.genomic_dir, filename)
                accessions.append(accession)
                qc_files.append(filename)
                max_contigs.append(self.count_contigs(filepath))
                annotations.append(self.annotation(filepath, accession))

            annotation_dict = {
                "filename": qc_files,
                "Max_contigs": max_contigs,
                "Annotated": annotations}

            annotation_df = pd.DataFrame(
                data = annotation_dict,
                index=accessions)
            annotation_df.to_csv(self.annot_report_path)
